diff --git a/extra/Configs/Config.in b/extra/Configs/Config.in
index 1060729..209e7f9 100644
--- a/extra/Configs/Config.in
+++ b/extra/Configs/Config.in
@@ -1813,7 +1813,6 @@ config UCLIBC_HAS_SYS_SIGLIST
 
 config UCLIBC_HAS_GETTEXT_AWARENESS
 	bool "Include gettext awareness"
-	depends on UCLIBC_HAS_LOCALE && UCLIBC_MJN3_ONLY
 	help
 	  NOTE!!!  Not yet integrated with strerror and strsignal.  NOTE!!!
 
diff --git a/include/libintl.h b/include/libintl.h
index be3969f..974fdb6 100644
--- a/include/libintl.h
+++ b/include/libintl.h
@@ -22,7 +22,7 @@
 #define _LIBINTL_H	1
 
 #include <features.h>
-
+#if 0
 /* We define an additional symbol to signal that we use the GNU
    implementation of gettext.  */
 #define __USE_GNU_GETTEXT 1
@@ -31,72 +31,65 @@
    maximum minor revision number supported for a given major revision.  */
 #define __GNU_GETTEXT_SUPPORTED_REVISION(major) \
   ((major) == 0 ? 1 : -1)
+#endif
 
 __BEGIN_DECLS
 
 /* Look up MSGID in the current default message catalog for the current
    LC_MESSAGES locale.  If not found, returns MSGID itself (the default
    text).  */
-extern char *gettext (__const char *__msgid)
-     __THROW __attribute_format_arg__ (1);
+extern char *gettext (const char *__msgid);
 
 /* Look up MSGID in the DOMAINNAME message catalog for the current
    LC_MESSAGES locale.  */
-extern char *dgettext (__const char *__domainname, __const char *__msgid)
-     __THROW __attribute_format_arg__ (2);
+extern char *dgettext (const char *__domainname, const char *__msgid);
 #if 0 /* uClibc: disabled */
-extern char *__dgettext (__const char *__domainname, __const char *__msgid)
-     __THROW __attribute_format_arg__ (2);
+extern char *__dgettext (const char *__domainname, const char *__msgid);
 #endif
 
 /* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY
    locale.  */
-extern char *dcgettext (__const char *__domainname,
-			__const char *__msgid, int __category)
-     __THROW __attribute_format_arg__ (2);
+extern char *dcgettext (const char *__domainname,
+			const char *__msgid, int __category);
 #if 0 /* uClibc: disabled */
-extern char *__dcgettext (__const char *__domainname,
-			  __const char *__msgid, int __category)
-     __THROW __attribute_format_arg__ (2);
+extern char *__dcgettext (const char *__domainname,
+			  const char *__msgid, int __category);
 #endif
 
 
 /* Similar to `gettext' but select the plural form corresponding to the
    number N.  */
-extern char *ngettext (__const char *__msgid1, __const char *__msgid2,
-		       unsigned long int __n)
-     __THROW __attribute_format_arg__ (1) __attribute_format_arg__ (2);
+extern char *ngettext (const char *__msgid1, const char *__msgid2,
+		       unsigned long int __n);
 
 /* Similar to `dgettext' but select the plural form corresponding to the
    number N.  */
-extern char *dngettext (__const char *__domainname, __const char *__msgid1,
-			__const char *__msgid2, unsigned long int __n)
-     __THROW __attribute_format_arg__ (2) __attribute_format_arg__ (3);
+extern char *dngettext (const char *__domainname, const char *__msgid1,
+			const char *__msgid2, unsigned long int __n);
 
 /* Similar to `dcgettext' but select the plural form corresponding to the
    number N.  */
-extern char *dcngettext (__const char *__domainname, __const char *__msgid1,
-			 __const char *__msgid2, unsigned long int __n,
-			 int __category)
-     __THROW __attribute_format_arg__ (2) __attribute_format_arg__ (3);
+extern char *dcngettext (const char *__domainname, const char *__msgid1,
+			 const char *__msgid2, unsigned long int __n,
+			 int __category);
 
 
 /* Set the current default message catalog to DOMAINNAME.
    If DOMAINNAME is null, return the current default.
    If DOMAINNAME is "", reset to the default of "messages".  */
-extern char *textdomain (__const char *__domainname) __THROW;
+extern char *textdomain (const char *__domainname);
 
 /* Specify that the DOMAINNAME message catalog will be found
    in DIRNAME rather than in the system locale data base.  */
-extern char *bindtextdomain (__const char *__domainname,
-			     __const char *__dirname) __THROW;
+extern char *bindtextdomain (const char *__domainname,
+			     const char *__dirname);
 
 /* Specify the character encoding in which the messages from the
    DOMAINNAME message catalog will be returned.  */
-extern char *bind_textdomain_codeset (__const char *__domainname,
-				      __const char *__codeset) __THROW;
-
+extern char *bind_textdomain_codeset (const char *__domainname,
+				      const char *__codeset);
 
+#if 0
 /* Optimized version of the function above.  */
 #if defined __OPTIMIZE__ && !defined __cplusplus
 
@@ -122,6 +115,7 @@ extern char *bind_textdomain_codeset (__const char *__domainname,
   dcngettext (domainname, msgid1, msgid2, n, LC_MESSAGES)
 
 #endif	/* Optimizing.  */
+#endif
 
 __END_DECLS
 
diff --git a/libintl/Makefile.in b/libintl/Makefile.in
index 22ae70c..1ca178a 100644
--- a/libintl/Makefile.in
+++ b/libintl/Makefile.in
@@ -15,16 +15,11 @@ LIBS-libintl.so := $(LIBS)
 
 libintl_FULL_NAME := libintl-$(VERSION).so
 
-MOBJ := \
-	gettext.o ngettext.o  dgettext.o dcgettext.o dngettext.o dcngettext.o \
-	textdomain.o bindtextdomain.o bind_textdomain_codeset.o \
-	_nl_expand_alias.o _nl_msg_cat_cntr.o # glibc-isms
-
 libintl_DIR := $(top_srcdir)libintl
 libintl_OUT := $(top_builddir)libintl
 
 libintl_MSRC := $(libintl_DIR)/intl.c
-libintl_MOBJ := $(patsubst %.o,$(libintl_OUT)/%.o,$(MOBJ))
+libintl_MOBJ := $(patsubst $(libutil_DIR)/%.c,$(libintl_OUT)/%.o,$(libutil_SRC))
 
 ifneq ($(DOMULTI),n)
 CFLAGS-libintl += $(patsubst %,-DL_%,$(subst .o,,$(notdir $(libintl_MOBJ))))
diff --git a/libintl/intl.c b/libintl/intl.c
index e42a999..aac1362 100644
--- a/libintl/intl.c
+++ b/libintl/intl.c
@@ -18,58 +18,42 @@
 #undef __OPTIMIZE__
 #include <libintl.h>
 
-/**********************************************************************/
-#ifdef L_gettext
+#ifdef __set_errno
+#undef __set_errno
+#endif
+
+#define __set_errno(val) (errno = (val))
 
+/**********************************************************************/
 char *gettext(const char *msgid)
 {
 	return (char *) msgid;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_dgettext
-
 char *dgettext(const char *domainname,
 				 const char *msgid)
 {
 	return (char *) msgid;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_dcgettext
-
 char *dcgettext(const char *domainname,
 				  const char *msgid, int category)
 {
 	return (char *) msgid;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_ngettext
-
 char *ngettext(const char *msgid1, const char *msgid2,
 			   unsigned long int n)
 {
 	return (char *) ((n == 1) ? msgid1 : msgid2);
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_dngettext
-
 char *dngettext(const char *domainname, const char *msgid1,
 				const char *msgid2, unsigned long int n)
 {
 	return (char *) ((n == 1) ? msgid1 : msgid2);
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_dcngettext
-
 char *dcngettext(const char *domainname, const char *msgid1,
 				 const char *msgid2, unsigned long int n,
 				 int category)
@@ -77,10 +61,7 @@ char *dcngettext(const char *domainname, const char *msgid1,
 	return (char *) ((n == 1) ? msgid1 : msgid2);
 }
 
-#endif
 /**********************************************************************/
-#ifdef L_textdomain
-
 char *textdomain(const char *domainname)
 {
 	static const char default_str[] = "messages";
@@ -91,11 +72,7 @@ char *textdomain(const char *domainname)
 	}
 	return (char *) default_str;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_bindtextdomain
-
 char *bindtextdomain(const char *domainname, const char *dirname)
 {
 	static const char dir[] = "/";
@@ -115,11 +92,7 @@ char *bindtextdomain(const char *domainname, const char *dirname)
 
 	return (char *) dir;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L_bind_textdomain_codeset
-
 /* Specify the character encoding in which the messages from the
    DOMAINNAME message catalog will be returned.  */
 char *bind_textdomain_codeset(const char *domainname, const char *codeset)
@@ -129,26 +102,14 @@ char *bind_textdomain_codeset(const char *domainname, const char *codeset)
 	}
 	return NULL;
 }
-
-#endif
 /**********************************************************************/
-#ifdef L__nl_expand_alias
-
-/* glibc-ism */
-
-const char *_nl_expand_alias(const char * name);
 const char *_nl_expand_alias(const char * name)
 {
 	return NULL;		 /* uClibc does not support locale aliases. */
 }
-
-#endif
 /**********************************************************************/
-#ifdef L__nl_msg_cat_cntr
 
 /* glibc-ism */
 
 int _nl_msg_cat_cntr = 0;
-
-#endif
 /**********************************************************************/
